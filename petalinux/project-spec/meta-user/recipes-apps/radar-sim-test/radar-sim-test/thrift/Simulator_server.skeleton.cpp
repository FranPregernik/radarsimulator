// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Simulator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hr::franp::rsim;

class SimulatorHandler : virtual public SimulatorIf {
 public:
  SimulatorHandler() {
    // Your initialization goes here
  }

  /**
   * Resets the DMA and simulator hardware.
   * 
   */
  void reset() {
    // Your implementation goes here
    printf("reset\n");
  }

  /**
   * Ensure the HW is calibrated with the clock signals.
   * 
   */
  void calibrate() {
    // Your implementation goes here
    printf("calibrate\n");
  }

  /**
   * Enables the simulator output.
   * 
   */
  void enable() {
    // Your implementation goes here
    printf("enable\n");
  }

  /**
   * Enables the MTI simulator output.
   * 
   */
  void enableMti() {
    // Your implementation goes here
    printf("enableMti\n");
  }

  /**
   * Enables the NORM simulator output.
   * 
   */
  void enableNorm() {
    // Your implementation goes here
    printf("enableNorm\n");
  }

  /**
   * Disables the simulator output.
   * 
   */
  void disable() {
    // Your implementation goes here
    printf("disable\n");
  }

  /**
   * Disables the MTI simulator output.
   * 
   */
  void disableMti() {
    // Your implementation goes here
    printf("disableMti\n");
  }

  /**
   * Disables the NORM simulator output.
   * 
   */
  void disableNorm() {
    // Your implementation goes here
    printf("disableNorm\n");
  }

  /**
   * Loads the clutter map data from the common location.
   * 
   * 
   * @param arpPosition
   */
  void loadClutterMap(const int32_t arpPosition) {
    // Your implementation goes here
    printf("loadClutterMap\n");
  }

  /**
   * Loads the clutter map data from the common location.
   * 
   * 
   * @param arpPosition
   */
  void loadTargetMap(const int32_t arpPosition) {
    // Your implementation goes here
    printf("loadTargetMap\n");
  }

  /**
   * Returns the state of the simulator.
   * 
   */
  void getState(SimState& _return) {
    // Your implementation goes here
    printf("getState\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SimulatorHandler> handler(new SimulatorHandler());
  shared_ptr<TProcessor> processor(new SimulatorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

